name: Laravel 

on:
  schedule:
  - cron:  '30 6 * * *'
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Nginx-php81-laravel8-AMD64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image nginx, php 8.1 and laravel 8
      run: docker-compose -f "docker-compose.yml" up -d --build
      env:
        PHP_VERSION: "8.1"
        LARAVEL_VERSION: 8
        BACK_END: nginx
        XDEBUG: true
        DISPLAY_PHPERROR: true
        SERVER_ROOT:  /var/www/public
        APP_CODE_PATH_HOST: /tmp/lara
    - name: Build the Docker image mariadb
      run: docker run --detach --name mariadb -p 3306:3306 --env MARIADB_USER=test --env MARIADB_PASSWORD=test --env MARIADB_ROOT_PASSWORD=test  mariadb:latest
    - name: PHP version check
      run:  docker exec laravel_laravel_1 php -v
    - name: Container check
      run: docker ps
    - name: Mongodb driver check
      run:  docker exec laravel_laravel_1 php -m | grep mongo
    - name: Mysql Driver check
      run: docker exec laravel_laravel_1 php -m | grep mysqli
    - name: Git Version check
      run: docker exec laravel_laravel_1 git --version
    - name: Curl Version check
      run: docker exec laravel_laravel_1 curl --version
    - name: Composer test
      run: docker exec laravel_laravel_1 composer
    - name: Check laravel install or not
      run:  |
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
        do 
          sleep 10s
        done
    - name: Root path check
      run: |
        docker exec laravel_laravel_1 cat /etc/nginx/conf.d/default.conf
    - name: Download Database information with env / download priconfigure env
      run: docker exec laravel_laravel_1 wget -O /var/www/.env https://raw.githubusercontent.com/nabad600/image-test-file/main/laravel.env
    - name: Root path check
      run: docker exec laravel_laravel_1 cat /var/www/.env
    - name: Check Laravel to mariadb connection status
      run: docker exec laravel_laravel_1 php artisan migrate
    - name: Laravel test
      run:  |
        curl -i http://localhost:53487/
    - name: Destroy container and file
      run:  |
        docker-compose down
        echo "y" | docker image prune -a
        sudo rm -rf /tmp/lara
  # Nginx-php81-laravel8-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image nginx, php 8.1 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.1"
  #       LARAVEL_VERSION: 8
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara
    
  

  # Nginx-php8-laravel8-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image nginx, php 8.0 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 8
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "y" | docker image prune -a
  #       sudo rm -rf /tmp/lara
  # Nginx-php8-laravel8-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image nginx, php 8.0 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 8
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara
      

  # Nginx-php8-laravel7-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build the Docker image nginx, php 8.0 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 7
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       sudo rm -rf /tmp/lara
  #       echo "y" | docker image prune -a
  # Nginx-php8-laravel7-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image nginx, php 8.0 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 7
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara
    
  # Nginx-php7-laravel8-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build the Docker image nginx, php 7.4 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 8
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       sudo rm -rf /tmp/lara
  #       echo "y" | docker image prune -a
  # Nginx-php7-laravel8-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image nginx, php 7.4 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 8
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara

  # Nginx-php7-laravel7-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build the Docker image nginx, php 7.4 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 7
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       sudo rm -rf /tmp/lara
  #       echo "y" | docker image prune -a
  # Nginx-php7-laravel7-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image nginx, php 7.4 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 7
  #       BACK_END: nginx
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/nginx/conf.d/default.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara

  # Apache-php81-laravel8-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image Apache, php 8.1 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.1"
  #       LARAVEL_VERSION: 8
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       sudo rm -rf /tmp/lara
  #       echo "y" | docker image prune -a
  # Apache-php81-laravel8-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image Apache, php 8.1 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.1"
  #       LARAVEL_VERSION: 8
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara
  
  

  # Apache-php8-laravel8-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image Apache, php 8.0 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 8
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       sudo rm -rf /tmp/lara
  #       echo "y" | docker image prune -a
  # Apache-php8-laravel8-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image Apache, php 8.0 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 8
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara

  # Apache-php8-laravel7-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build the Docker image Apache, php 8.0 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 7
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "y" | docker image prune -a
  #       sudo rm -rf /tmp/lara
  # Apache-php8-laravel7-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image Apache, php 8.0 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "8.0"
  #       LARAVEL_VERSION: 7
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara

    
  # Apache-php7-laravel8-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build the Docker image Apache, php 7.4 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 8
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "y" | docker image prune -a
  #       sudo rm -rf /tmp/lara
  # Apache-php7-laravel8-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image Apache, php 7.4 and laravel 8
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 8
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara

  # Apache-php7-laravel7-AMD64:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build the Docker image Apache, php 7.4 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 7
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel_laravel_1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel_laravel_1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel_laravel_1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel_laravel_1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel_laravel_1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel_laravel_1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel_laravel_1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "y" | docker image prune -a
  #       sudo rm -rf /tmp/lara
  # Apache-php7-laravel7-ARM64:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: File and folder check
  #     run:  |
  #       while [ -d /tmp/lara ]
  #       do
  #         sleep 3s
  #         sudo rm -rf /tmp/lara
  #       done
  #   - name: Build the Docker image Apache, php 7.4 and laravel 7
  #     run: docker-compose -f "docker-compose.yml" up -d --build
  #     env:
  #       PHP_VERSION: "7.4"
  #       LARAVEL_VERSION: 7
  #       BACK_END: apache
  #       XDEBUG: true
  #       DISPLAY_PHPERROR: true
  #       SERVER_ROOT:  /var/www/public
  #       APP_CODE_PATH_HOST: /tmp/lara
  #   - name: PHP version check
  #     run:  docker exec laravel-laravel-1 php -v
  #   - name: Mongodb driver check
  #     run:  docker exec laravel-laravel-1 php -m | grep mongo
  #   - name: Mysql Driver check
  #     run: docker exec laravel-laravel-1 php -m | grep mysqli
  #   - name: Git Version check
  #     run: docker exec laravel-laravel-1 git --version
  #   - name: Curl Version check
  #     run: docker exec laravel-laravel-1 curl --version
  #   - name: Composer test
  #     run: docker exec laravel-laravel-1 composer
  #   - name: Check laravel install or not
  #     run:  |
  #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:53487/index.php)" != "200" ]]; 
  #       do 
  #         sleep 10s
  #       done
  #   - name: Root path check
  #     run: |
  #       docker exec laravel-laravel-1 cat /etc/apache2/httpd.conf
  #   - name: Laravel test
  #     run:  |
  #       curl -i http://localhost:53487/
  #   - name: Destroy container and file
  #     run:  |
  #       docker-compose down
  #       echo "password" | sudo -S whoami
  #       echo "y" | docker system prune -a
  #       sudo rm -rf /tmp/lara
